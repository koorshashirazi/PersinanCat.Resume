@inject IStringLocalizer<Contact> L
@inject IGoogleAnalyticsService GoogleAnalyticsService
@inject ToastService ToastService
@inject IJSRuntime JSRuntime


<div class="section px-2 px-lg-4 pb-4 pt-5 mb-5" id="contact">
    <div class="container-narrow">
        <div class="text-center mb-5">
            <h2 class="marker marker-center">@L["ContactMe"]</h2>
        </div>
        <div class="row">
            <div class="col-md-6" data-aos="zoom-in" data-aos-delay="100">
                <div class="my-2 p-3 pt-2">
                    <EditForm Model="@_contactForm" OnValidSubmit="@HandleValidSubmit"
                        OnInvalidSubmit="@HandleInvalidSubmit">
                        <LocalizedDataAnnotationsValidator />
                        <div class="form-group my-2">
                            <label for="name" class="form-label fw-bolder">@L["Name"]</label>
                            <InputText @bind-Value="_contactForm.Name" class="form-control" id="name" name="name" data-testid="contact-name" />
                            <ValidationMessage For="@(() => _contactForm.Name)" class="validation-message text-danger" />
                        </div>
                        <div class="form-group my-2">
                            <label for="subject" class="form-label fw-bolder">@L["Subject"]</label>
                            <InputText @bind-Value="_contactForm.Subject" class="form-control" type="text" id="subject"
                                name="subject" data-testid="contact-subject" />
                            <ValidationMessage For="@(() => _contactForm.Subject)"
                                class="validation-message text-danger" />
                        </div>
                        <div class="form-group my-2">
                            <label for="message" class="form-label fw-bolder">@L["Message"]</label>
                            <InputTextArea @bind-Value="_contactForm.Message" class="form-control" style="resize: none;"
                                id="message" name="message" rows="4" data-testid="contact-message" />
                            <ValidationMessage For="@(() => _contactForm.Message)"
                                class="validation-message text-danger" />
                        </div>
                        <button class="btn btn-primary mt-2" name="btnSendMessage" id="btnSendMessage"
                            type="submit" data-testid="contact-submit-button">@L["Send"]</button>
                    </EditForm>
                </div>
            </div>
            <div class="col-md-6" data-aos="fade-left" data-aos-delay="300">
                <div class="mt-3 px-1">
                    <div class="h5">@L["LetsTalk"]</div>
                    <p>@L["ContactInfo"]</p>
                </div>
                <div class="mt-53 px-1">
                    <div class="row">
                        <div class="col-sm-2">
                            <div class="pb-1">@L["Email"]:</div>
                        </div>
                        <div class="col-sm-10">
                            <div class="pb-1 fw-bolder">@L["ContactEmail"]</div>
                        </div>
                    </div>
                    <div class="row">
                        <p>@L["LookingForward"]</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private ContactFormModel _contactForm = new ();

    protected override void OnInitialized()
    {
        _contactForm.Subject = L["DefaultSubject"];
        _contactForm.Message = L["DefaultMessage"];
    }

    private const string ContactEmail = "koorshashirazi@hotmail.com";

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Handling valid submit");
        try
        {
            // Track the event
            await GoogleAnalyticsService.TrackEvent("form", "submit", "contact_form");

            // Show success toast
            await ToastService.ShowSuccess(L["MessageSent"]);

#if !DEBUG
            var mailtoLink = $"mailto:{ContactEmail}?subject={_contactForm.Subject}&body={_contactForm.Message}";
            await JSRuntime.InvokeVoidAsync("open", mailtoLink, "_self");
#endif

            // Reset form
            _contactForm = new ContactFormModel();
        }
        catch
        {
            // Show error toast
            await ToastService.ShowError(L["MessageSentError"]);
        }
    }

    private async Task HandleInvalidSubmit()
    {
        Console.WriteLine("Handling invalid submit");
        await ToastService.ShowError(L["MessageSendingEmpty"]);
    }
}
